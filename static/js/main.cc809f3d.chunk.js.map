{"version":3,"sources":["components/LoginForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/MessageForm.jsx","components/ChatFeed.jsx","App.js","index.js"],"names":["LoginForm","useState","username","setUsername","password","setPassword","error","setError","handleSubmit","e","a","preventDefault","authObject","axios","get","headers","localStorage","setItem","window","location","reload","className","onSubmit","type","value","onChange","target","placeholder","required","align","href","MyMessage","message","attachments","length","src","file","alt","style","float","marginRight","color","backgroundColor","text","TheirMessage","lastMessage","isFirstMessageByUser","sender","backgroundImage","avatar","marginLeft","MessageForm","props","setValue","chatId","creds","event","trim","sendMessage","isTyping","htmlFor","PictureOutlined","multiple","id","display","files","bind","SendOutlined","Exit","console","log","clear","close","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","onClick","title","keys","Object","key","lastMessageKey","width","renderMessages","height","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","onNewMessage","Audio","play","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc809f3d.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nconst LoginForm = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const authObject = { 'Project-ID': \"52e6936c-bdd4-431a-a6e7-c60aaa346657\", 'User-Name': username, 'User-Secret': password };\r\n\r\n    try {\r\n      await axios.get('https://api.chatengine.io/chats', { headers: authObject });\r\n\r\n      localStorage.setItem('username', username);\r\n      localStorage.setItem('password', password);\r\n\r\n      window.location.reload();\r\n      setError('');\r\n    } catch (err) {\r\n      setError('Oops, incorrect credentials.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n     \r\n      <div className=\"form\">\r\n      <div className=\"imgg\" ></div>\r\n        <h1 className=\"title\">ChatBox</h1>\r\n        <form onSubmit={handleSubmit}>\r\n          <input type=\"text\" value={username} onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required />\r\n          <input type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required />\r\n          <div align=\"center\">\r\n            <button type=\"submit\" className=\"button\">\r\n              <span>Login</span>\r\n            </button>\r\n          <a className=\"abtn\" href=\"https://chatboxxxx.netlify.app/\">Request</a>\r\n          </div>\r\n        </form>\r\n        <h1>{error}</h1>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default LoginForm;","const MyMessage = ({ message }) => {\r\n    if (message.attachments && message.attachments.length > 0) {\r\n      return (\r\n        <img\r\n          src={message.attachments[0].file}\r\n          alt=\"message-attachment\"\r\n          className=\"message-image\"\r\n          style={{ float: 'right' }}\r\n        />\r\n      );\r\n    }\r\n  \r\n    return (\r\n      <div className=\"message\" style={{ float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#000' }}>\r\n        {message.text}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default MyMessage;","const TheirMessage = ({ lastMessage, message }) => {\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n  \r\n    return (\r\n      <div className=\"message-row\">\r\n        {isFirstMessageByUser && (\r\n          <div\r\n            className=\"message-avatar\"\r\n            style={{ backgroundImage: message.sender && `url(${message.sender.avatar})` }}\r\n          />\r\n        )}\r\n        {message.attachments && message.attachments.length > 0\r\n          ? (\r\n            <img\r\n              src={message.attachments[0].file}\r\n              alt=\"message-attachment\"\r\n              className=\"message-image\"\r\n              style={{ marginLeft: isFirstMessageByUser ? '4px' : '48px' }}\r\n            />\r\n          )\r\n          : (\r\n            <div className=\"message\" style={{ float: 'left', backgroundColor: '#CABCDC', marginLeft: isFirstMessageByUser ? '4px' : '48px' }}>\r\n              {message.text}\r\n            </div>\r\n          )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default TheirMessage;","import { useState } from 'react';\r\nimport { SendOutlined, PictureOutlined } from '@ant-design/icons';\r\nimport { sendMessage, isTyping } from 'react-chat-engine';\r\n\r\nconst MessageForm = (props) => {\r\n  const [value, setValue] = useState('');\r\n  const { chatId, creds } = props;\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n\r\n    isTyping(props, chatId);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const text = value.trim();\r\n\r\n    if (text.length > 0) {\r\n      sendMessage(creds, chatId, { text });\r\n    }\r\n\r\n    setValue('');\r\n  };\r\n\r\n  const handleUpload = (event) => {\r\n    sendMessage(creds, chatId, { files: event.target.files, text: '' });\r\n  };\r\n\r\n  return (\r\n    <form className=\"message-form\" onSubmit={handleSubmit}>\r\n      <input\r\n        className=\"message-input\"\r\n        placeholder=\"Send a message...\"\r\n        value={value}\r\n        onChange={handleChange}\r\n        onSubmit={handleSubmit}\r\n      />\r\n      <label htmlFor=\"upload-button\">\r\n        <span className=\"image-button\">\r\n          <PictureOutlined className=\"picture-icon\" />\r\n        </span>\r\n      </label>\r\n      <input\r\n        type=\"file\"\r\n        multiple={false}\r\n        id=\"upload-button\"\r\n        style={{ display: 'none' }}\r\n        onChange={handleUpload.bind(this)}\r\n      />\r\n      <button type=\"submit\" className=\"send-button\">\r\n        <SendOutlined className=\"send-icon\" />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MessageForm;","import MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\nimport MessageForm from './MessageForm';\r\n\r\n\r\nconst ChatFeed = (props) => {\r\n  const { chats, activeChat, userName, messages } = props;\r\n\r\n  const chat = chats && chats[activeChat];\r\n\r\n  const renderReadReceipts = (message, isMyMessage) => chat.people.map((person, index) => person.last_read === message.id && (\r\n    <div\r\n      key={`read_${index}`}\r\n      className=\"read-receipt\"\r\n      style={{\r\n        float: isMyMessage ? 'right' : 'left',\r\n        backgroundImage: person.person.avatar && `url(${person.person.avatar})`,\r\n      }}\r\n    />\r\n  ));\r\n\r\n  const renderMessages = () => {\r\n    const keys = Object.keys(messages);\r\n\r\n    return keys.map((key, index) => {\r\n      const message = messages[key];\r\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n      const isMyMessage = userName === message.sender.username;\r\n\r\n      return (\r\n        <div key={`msg_${index}`} style={{ width: '100%' }}>\r\n          <div className=\"message-block\">\r\n            {isMyMessage\r\n              ? <MyMessage message={message} />\r\n              : <TheirMessage message={message} lastMessage={messages[lastMessageKey]} />}\r\n          </div>\r\n          <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px' }}>\r\n            {renderReadReceipts(message, isMyMessage)}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n\r\n\r\n\r\n  if (!chat) return <div />;\r\n\r\n  return (\r\n    <div className=\"chat-feed\">\r\n  <button \r\n className=\"btn1\" onClick={Exit}>Logout</button>\r\n\r\n <a className=\"pbtn\" href=\"https://chatboxxxx.netlify.app/privacy.html\">privacy</a>\r\n      <div className=\"chat-title-container\">\r\n       <div className=\"img\"></div>\r\n        <div className=\"chat-title\">{chat?.title}</div>\r\n        <div className=\"chat-subtitle\">\r\n          {chat.people.map((person) => ` ${person.person.username}`)}\r\n        </div>\r\n      </div>\r\n      {renderMessages()}\r\n      <div style={{ height: '100px' }} />\r\n      <div className=\"message-form-container\">\r\n        <MessageForm {...props} chatId={activeChat} />\r\n      </div>\r\n    </div> \r\n    \r\n    \r\n    );\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n};\r\n\r\n\r\n\r\nfunction Exit() {\r\n\r\n  console.log(\"Exit\")\r\n\r\n  localStorage.clear()\r\n \r\n  window.close()\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default ChatFeed;\r\n","import { ChatEngine } from \"react-chat-engine\";\r\nimport LoginForm from './components/LoginForm';\r\nimport \"./App.css\";\r\nimport ChatFeed from './components/ChatFeed';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n  \r\n\r\n  if (!localStorage.getItem('username')) return <LoginForm />\r\n\r\n  return (\r\n    <ChatEngine\r\n      height=\"100vh\"\r\n      projectID=\"52e6936c-bdd4-431a-a6e7-c60aaa346657\"\r\n      userName={localStorage.getItem('username')}\r\n      userSecret={localStorage.getItem('password')}\r\n\r\n      renderChatFeed={(chatAppProps) => <ChatFeed {...chatAppProps} />}\r\n      onNewMessage={() => new Audio('https://chat-engine-assets.s3.amazonaws.com/click.mp3').play()}\r\n      \r\n      \r\n      \r\n      />\r\n     \r\n      );\r\n   \r\n    };\r\n  \r\n    \r\n\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDom.render(<App />, document.getElementById('root'));"],"sourceRoot":""}